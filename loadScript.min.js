const loadScripts=(w=>{'use strict';

	const URL=w.URL,
	Promise=w.Promise,
	Assign=w.Object.assign,

	d=w.document,
	head=d.head,
	loadScriptsElem=d.currentScript,

	pending=[],
	sources=[],
	fails=[],

	g=e=>{
		const t=e.type,x=e.target;
		x.removeEventListener(t,g);
		x['done_'+t](x)
	},

	h=(x,t,r)=>{
		x.addEventListener(t,g);
		x['done_'+t]=r
	},

	catcher=e=>{
		const s=e.src;
		fails.push(s);
		e.after(d.createComment('error:\t'+s));
		e.remove()
	},

	load_script=(url,frag)=>{
		const m=sources;
		if(m.includes(url)){//console.warn(url); todo fix hash
			return Promise.resolve(null);
		}else{
			m.push(url);
			const promessa=new Promise((a,b)=>{//resolve,reject
				const e=frag.appendChild(d.createElement('script'));
				h(e,'load',a);
				h(e,'error',b);
				e.src=url
			});
			promessa.catch(catcher);
			return promessa
		}
	},

	done=()=>{
		const m=pending;//next_promises
		m.shift();
		if(1===m.length){//doneAll
			loadScriptsElem.remove();
			if(fails.length){
				console.warn('fails:%O',fails)
			};
		};
		return m[0]
	},

	isValidUrl=s=>{
		let v=false;
		try{
			new URL(s);
			v=true
		}finally{
			return v
		}
	},

	removeHash=(v,i,m)=>{m[i]=v.split('#')[0]},

	load_scripts=(paths,cfg)=>{
		console.dir(cfg);
		if(cfg.stripHash){paths.forEach(removeHash)};
		const urls=cfg.validateUrl?paths.filter(isValidUrl):paths,
		e=d.createDocumentFragment(),
		f=load_script,
		m=pending[0]=Promise.all(urls.map(s=>f(s,e)));//promises
		m.finally(done);
		head.appendChild(e);
		return m
	};

	let current_promises=null;

	const defOpt={
		stripHash:true,
		validateUrl:true,
		a:1,b:2,
	};

	return (urls,opt=false)=>{//opzioni nome:valore, 1lv
		if(urls.length){
			const m=pending,
			f=Assign,
			e=defOpt,
			x=load_scripts(urls,opt?f(f({__proto__:null},e),opt):e);
			if(0!==m.length){
				m.push(x)
			}else{
				current_promises=x
			};
			return x
		}else{
			return null
		}
	}

})(window);